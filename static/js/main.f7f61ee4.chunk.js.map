{"version":3,"sources":["GamemodeData.js","util.js","RockPapersScissors.jsx","App.js","serviceWorker.js","index.js"],"names":["gamemodeData","id","name","value","getNpcRandChoice","type","randNumber","getChoice","Math","floor","random","RockPaperScissorsSelection","props","getSelection","options","data","map","option","Grid","Column","key","className","onClick","event","Icon","size","Row","columns","length","App","useState","selection","setSelection","playerScore","setPlayerScore","npcScore","setNpcScore","playerWin","resetGame","npcWin","useEffect","npcChoice","playerChoice","findWinner","play","Header","as","color","centered","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAkBiBA,EAlBI,CACjB,CACEC,GAAI,EACJC,KAAM,aACNC,MAAO,SAET,CACIF,GAAI,EACJC,KAAM,gBACNC,MAAO,YAET,CACEF,GAAI,EACJC,KAAM,YACNC,MAAO,SCdJC,EAAmB,SAASC,GAInC,OAGJ,SAAmBC,GAEf,OAAOA,GACH,KAAK,EAAG,MAAO,OACf,KAAK,EAAG,MAAO,QACf,KAAK,EAAG,MAAO,YATNC,CAFIC,KAAKC,MAAOD,KAAKE,SAAWL,EAAQ,KCKzD,IAsBeM,EAtBoB,SAACC,GAAW,IACpCC,EAAiBD,EAAjBC,aAMDC,EACFC,EAAKC,IAAI,SAACC,GAAD,OACL,kBAACC,EAAA,EAAKC,OAAN,CAAaC,IAAKH,EAAOhB,GAAIoB,UAAU,YAAYC,QAAS,SAACC,GALjEV,EAKkFI,EALnEd,SAMP,kBAACqB,EAAA,EAAD,CAAMtB,KAAMe,EAAOf,KAAMuB,KAAK,eAK1C,OACI,kBAACP,EAAA,EAAKQ,IAAN,CAAUC,QAASZ,EAAKa,QACnBd,ICkDEe,MAlEf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEyBF,mBAAS,GAFlC,mBAENG,EAFM,KAEOC,EAFP,OAGmBJ,mBAAS,GAH5B,mBAGNK,EAHM,KAGIC,EAHJ,KA6Bb,SAASC,IACPH,EAAeD,EAAc,GAC7BK,IAGF,SAASC,IACPH,EAAYD,EAAW,GACvBG,IA3BFE,oBAAU,YAIV,WACE,IAAIC,EAAYrC,EAAiB,IAInC,SAAoBsC,EAAcD,GAE5BC,IAAiBD,EAAWH,IACN,SAAjBI,GAAyC,UAAdD,EAAuBF,IACjC,SAAjBG,GAAyC,aAAdD,EAA0BJ,IACpC,aAAjBK,GAA6C,SAAdD,EAAsBF,IACpC,aAAjBG,GAA6C,UAAdD,EAAuBJ,IACrC,UAAjBK,GAA0C,aAAdD,EAA0BF,IACrC,UAAjBG,GAA0C,SAAdD,GAAsBJ,IAX3DM,CAAWZ,EAAWU,GALtBG,IACC,CAACb,IA4BJ,IAAMO,EAAY,WAChBN,EAAa,KAGf,OACE,yBAAKX,UAAU,OACb,kBAACwB,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,UAAtB,qCACA,kBAAC7B,EAAA,EAAD,KAGE,kBAACA,EAAA,EAAKQ,IAAN,CAAUsB,UAAQ,EAACrB,QAAS,GAE1B,kBAACT,EAAA,EAAKC,OAAN,CAAa8B,UAAU,QAAvB,QACQhB,GAER,kBAACf,EAAA,EAAKC,OAAN,CAAa8B,UAAU,SAAvB,QACQd,IAIV,kBAAC,EAAD,CAAmBtB,aAtDJ,SAACV,GACpB6B,EAAa7B,SCDG+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f7f61ee4.chunk.js","sourcesContent":["const gamemodeData = [\r\n    {\r\n      id: 1,\r\n      name: \"hand paper\",\r\n      value: \"paper\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"hand scissors\",\r\n        value: \"scissors\"\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"hand rock\",\r\n        value: \"rock\"\r\n      }\r\n  ];\r\n  \r\n  export default gamemodeData;\r\n  ","export var getNpcRandChoice = function(type){\r\n    var randNumber = Math.floor((Math.random() * type) + 1);\r\n\r\n    var choice = getChoice(randNumber);\r\n    return choice\r\n}\r\n\r\nfunction getChoice(randNumber){\r\n\r\n    switch(randNumber){\r\n        case 1: return 'rock';\r\n        case 2: return 'paper';\r\n        case 3: return 'scissors';\r\n    }\r\n} ","import React, { useState, useEffect } from 'react';\r\nimport { Icon, Grid } from 'semantic-ui-react'\r\n\r\nimport data from \"./GamemodeData.js\"\r\nimport { getNpcRandChoice } from \"./util.js\"\r\n\r\nconst RockPaperScissorsSelection = (props) => {\r\n    const {getSelection } = props;\r\n\r\n    const selected = (i, j) =>{\r\n        getSelection(i.value)\r\n    }\r\n\r\n    const options = (\r\n        data.map((option) =>\r\n            <Grid.Column key={option.id} className=\"selection\" onClick={(event)=>selected(option, event)}>\r\n                <Icon name={option.name} size=\"massive\"></Icon>\r\n            </Grid.Column>\r\n        )\r\n    );\r\n\r\n    return (\r\n        <Grid.Row columns={data.length}>\r\n            {options}\r\n        </Grid.Row>\r\n    )\r\n}\r\n\r\nexport default RockPaperScissorsSelection\r\n","import React, { useState, useEffect } from 'react';\nimport { Header,  Grid } from 'semantic-ui-react'\nimport './App.css';\n\nimport RockPaperScissors from \"./RockPapersScissors\"\nimport { getNpcRandChoice } from \"./util.js\"\n\nfunction App() {\n  const [selection, setSelection] = useState(\"\");\n  const [playerScore, setPlayerScore] = useState(0);\n  const [npcScore, setNpcScore] = useState(0);\n\n  const getSelection = (value) => {\n    setSelection(value);\n  }\n\n  useEffect(() => {\n    play();\n  }, [selection]);\n\n  function play() {\n    var npcChoice = getNpcRandChoice(3);\n    findWinner(selection, npcChoice)\n  }\n\n  function findWinner(playerChoice, npcChoice) {\n\n    if (playerChoice === npcChoice) resetGame();\n    else if (playerChoice === 'rock' && npcChoice === 'paper') npcWin();\n    else if (playerChoice === 'rock' && npcChoice === 'scissors') playerWin();\n    else if (playerChoice === 'scissors' && npcChoice === 'rock') npcWin();\n    else if (playerChoice === 'scissors' && npcChoice === 'paper') playerWin();\n    else if (playerChoice === 'paper' && npcChoice === 'scissors') npcWin();\n    else if (playerChoice === 'paper' && npcChoice === 'rock') playerWin();\n  }\n\n  function playerWin() {\n    setPlayerScore(playerScore + 1)\n    resetGame();\n  }\n\n  function npcWin() {\n    setNpcScore(npcScore + 1)\n    resetGame();\n  }\n\n  const resetGame = () => {\n    setSelection(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <Header as='h1' color=\"yellow\">Beat your friends and settle bets</Header>\n      <Grid>\n        {/* <Gamemodes></Gamemodes> */}\n\n        <Grid.Row centered columns={2}>\n          {/* <Header as='h1'>Score</Header> */}\n          <Grid.Column textAlign=\"left\">\n            YOU: {playerScore}\n          </Grid.Column>\n          <Grid.Column textAlign=\"right\">\n            NPC: {npcScore}\n          </Grid.Column>\n        </Grid.Row>\n\n        <RockPaperScissors getSelection={getSelection}></RockPaperScissors>\n      </Grid>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-less/semantic.less'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}